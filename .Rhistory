Rcpp::sourceCpp("src/RcppExports.cpp")
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
library(Rcpp)
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
data(iris)
X=iris[,-5]
y=iris[,5]
X=as.matrix(X)
y=as.integer(y)
X0=c(5.8,3,4.35,1.3)
my_knn_cpp(X,X0,y)
my_knn_R = function(X, X0, y){
# X data matrix with input attributes
# y response variable values of instances in X
# X0 vector of input attributes for prediction
nrows = nrow(X)
ncols = ncol(X)
# One of the instances is going to be the closest one:
#   closest_distance: it is the distance , min_output
closest_distance = 99999999
closest_output = -1
closest_neighbor = -1
for(i in 1:nrows){
distance = 0
for(j in 1:ncols){
difference = X[i,j]-X0[j]
distance = distance + difference * difference
}
distance = sqrt(distance)
if(distance < closest_distance){
closest_distance = distance
closest_output = y[i]
closest_neighbor = i
}
}
closest_output
}
my_knn_R(X,X0,y)
my_knn_cpp(X,X0,y)
install.packages("microbenchmark")
#install.packages("microbenchmark")
library(microbenchmark)
microbenchmark(list(my_knn_cpp(X,X0,y),my_knn_R(X,X0,y)))
microbenchmark(my_knn_cpp(X,X0,y),my_knn_R(X,X0,y))
install.packages("FNN")
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
minmax(1:6)
minmax_data(1:6)
stand_data(1:6)
y=stand_data(1:6)
mean(y)
sd(y)
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
Mink_dist(1:6,1:6)
Mink_dist(1:6,1:6,2)
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
Mink_dist(1:6,1:6,2)
Mink_dist(1:6,2:7,2)
Mink_dist(1:6,2:7,5)
Mink_dist(1:6,2:7,10)
Mink_dist(1:6,11:16,10)
Mink_dist(1:6,11:16,9)
Mink_dist(1:6,11:16,8)
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
Mink_dist(1:6,11:16,8)
library(magrittr)
abs((1:6-11:16)^8)
abs((1:6-11:16)^8) %>% sum
w=abs((1:6-11:16)^8) %>% sum
p=8
w=abs((1:6-11:16)^p) %>% sum
w^(1/p)
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
Mink_dist(1:6,11:16,8)
p=8
w=abs((1:6-11:16)^p) %>% sum
w
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
Mink_dist(1:6,11:16,8)
p=8
w=abs((1:6-11:16)^p) %>% sum
w^(1/p)
Mink_dist(1:6,11:16,2)
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
Mink_dist(1:6,11:16,2)
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
Mink_dist(1:6,11:16,2)
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
Mink_dist(1:6,11:16,2)
p=2
w=abs((1:6-11:16)^p) %>% sum
w^(1/p)
Mink_dist(1:6,11:16,14)
p=14
w=abs((1:6-11:16)^p) %>% sum
w^(1/p)
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
Mink_dist(1:6,11:16,-1)
Rcpp::sourceCpp("src/rcpp_hello_world.cpp")
Rcpp::sourceCpp('src/rcpp_hello_world.cpp')
devtools::load_all(".")
library(Rcpp)
library(FNN)
sourceCpp('src/rcpp_hello_world.cpp')
# X contains the inputs as a matrix of real numbers
data("iris")
# X contains the input attributes (excluding the class)
X <- iris[,-5]
# y contains the response variable (named medv, a numeric value)
y <- iris[,5]
# From dataframe to matrix
X <- as.matrix(X)
# From factor to integer
y <- as.integer(y)
# This is the point we want to predict
X0 <- c(5.80, 3.00, 4.35, 1.30)
# Using my_knn and FNN:knn to predict point X0
# Using the same number of neighbors, it should be similar (k=1)
#my_knn_R(X, X0, y)
my_knn_R = function(X, X0, y){
# X data matrix with input attributes
# y response variable values of instances in X
# X0 vector of input attributes for prediction
nrows = nrow(X)
ncols = ncol(X)
# One of the instances is going to be the closest one:
#   closest_distance: it is the distance , min_output
closest_distance = 99999999
closest_output = -1
closest_neighbor = -1
for(i in 1:nrows){
distance = 0
for(j in 1:ncols){
difference = X[i,j]-X0[j]
distance = distance + difference * difference
}
distance = sqrt(distance)
if(distance < closest_distance){
closest_distance = distance
closest_output = y[i]
closest_neighbor = i
}
}
closest_output
}
a=my_knn_R(X, X0, y)
b=my_knn_cpp(X,X0,y)
c=FNN::knn(X, matrix(X0, nrow = 1), y, k=1)
library(Rcpp)
library(FNN)
sourceCpp('src/rcpp_hello_world.cpp')
# X contains the inputs as a matrix of real numbers
data("iris")
# X contains the input attributes (excluding the class)
X <- iris[,-5]
# y contains the response variable (named medv, a numeric value)
y <- iris[,5]
# From dataframe to matrix
X <- as.matrix(X)
# From factor to integer
y <- as.integer(y)
# This is the point we want to predict
X0 <- c(5.80, 3.00, 4.35, 1.30)
# Using my_knn and FNN:knn to predict point X0
# Using the same number of neighbors, it should be similar (k=1)
#my_knn_R(X, X0, y)
my_knn_R = function(X, X0, y){
# X data matrix with input attributes
# y response variable values of instances in X
# X0 vector of input attributes for prediction
nrows = nrow(X)
ncols = ncol(X)
# One of the instances is going to be the closest one:
#   closest_distance: it is the distance , min_output
closest_distance = 99999999
closest_output = -1
closest_neighbor = -1
for(i in 1:nrows){
distance = 0
for(j in 1:ncols){
difference = X[i,j]-X0[j]
distance = distance + difference * difference
}
distance = sqrt(distance)
if(distance < closest_distance){
closest_distance = distance
closest_output = y[i]
closest_neighbor = i
}
}
closest_output
}
a=my_knn_R(X, X0, y)
b=my_knn_cpp(X,X0,y)
#c=FNN::knn(X, matrix(X0, nrow = 1), y, k=1)
conte=knn_completa(X,X0,y,1)
Rcpp::sourceCpp('src/rcpp_hello_world.cpp')
library(Rcpp)
library(FNN)
sourceCpp('src/rcpp_hello_world.cpp')
# X contains the inputs as a matrix of real numbers
data("iris")
# X contains the input attributes (excluding the class)
X <- iris[,-5]
# y contains the response variable (named medv, a numeric value)
y <- iris[,5]
# From dataframe to matrix
X <- as.matrix(X)
# From factor to integer
y <- as.integer(y)
# This is the point we want to predict
X0 <- c(5.80, 3.00, 4.35, 1.30)
# Using my_knn and FNN:knn to predict point X0
# Using the same number of neighbors, it should be similar (k=1)
#my_knn_R(X, X0, y)
my_knn_R = function(X, X0, y){
# X data matrix with input attributes
# y response variable values of instances in X
# X0 vector of input attributes for prediction
nrows = nrow(X)
ncols = ncol(X)
# One of the instances is going to be the closest one:
#   closest_distance: it is the distance , min_output
closest_distance = 99999999
closest_output = -1
closest_neighbor = -1
for(i in 1:nrows){
distance = 0
for(j in 1:ncols){
difference = X[i,j]-X0[j]
distance = distance + difference * difference
}
distance = sqrt(distance)
if(distance < closest_distance){
closest_distance = distance
closest_output = y[i]
closest_neighbor = i
}
}
closest_output
}
a=my_knn_R(X, X0, y)
b=my_knn_cpp(X,X0,y)
#c=FNN::knn(X, matrix(X0, nrow = 1), y, k=1)
conte=knn_completa(X,X0,y,1)
conte
a
b
X
stand_data(X)
mean(A[,1])
A=stand_data(X)
mean(A[,1])
mean(A[,1])
mean(A)
mean(A[,4])
A=stand_data(X0)
mean(A)
Rcpp::sourceCpp('src/rcpp_hello_world.cpp')
Rcpp::sourceCpp('src/rcpp_hello_world.cpp')
Rcpp::sourceCpp('src/rcpp_hello_world.cpp')
Rcpp::sourceCpp('src/rcpp_hello_world.cpp')
Rcpp::sourceCpp('src/rcpp_hello_world.cpp')
Rcpp::sourceCpp('src/rcpp_hello_world.cpp')
Rcpp::sourceCpp('src/rcpp_hello_world.cpp')
A=stand_data_Matrix(X)
mean(A[,2])
A
sd(A[,3])
sd(A[,2])
sd(A[,1])
Rcpp::sourceCpp('src/rcpp_hello_world.cpp')
Rcpp::sourceCpp('src/rcpp_hello_world.cpp')
conte=knn_completa(X,X0,y,2)
conte
conte=knn_completa(X,X0,y,1)
conte
conte=knn_completa(X,X0,y,0)
conte
a
b
for(i in 1:4){
cat(sd[X[i]])
}
for(i in 1:4){
cat(sd[X[,i]])
}
cat(sd(X[,i]))
for(i in 1:4){
print(sd(X[,i]))
}
X
# X contains the inputs as a matrix of real numbers
data("iris")
# X contains the input attributes (excluding the class)
X <- iris[,-5]
# y contains the response variable (named medv, a numeric value)
y <- iris[,5]
# From dataframe to matrix
X <- as.matrix(X)
# From factor to integer
y <- as.integer(y)
# This is the point we want to predict
X0 <- c(5.80, 3.00, 4.35, 1.30)
# Using my_knn and FNN:knn to predict point X0
# Using the same number of neighbors, it should be similar (k=1)
#my_knn_R(X, X0, y)
for(i in 1:4){
print(sd(X[,i]))
}
A=stand_data_Matrix(X)
X
Rcpp::sourceCpp('src/rcpp_hello_world.cpp')
# X contains the inputs as a matrix of real numbers
data("iris")
# X contains the input attributes (excluding the class)
X <- iris[,-5]
# y contains the response variable (named medv, a numeric value)
y <- iris[,5]
# From dataframe to matrix
X <- as.matrix(X)
# From factor to integer
y <- as.integer(y)
# This is the point we want to predict
X0 <- c(5.80, 3.00, 4.35, 1.30)
# Using my_knn and FNN:knn to predict point X0
# Using the same number of neighbors, it should be similar (k=1)
#my_knn_R(X, X0, y)
for(i in 1:4){
print(sd(X[,i]))
}
A=stand_data_Matrix(X)
X
Rcpp::sourceCpp('src/rcpp_hello_world.cpp')
library(Rcpp)
library(FNN)
sourceCpp('src/rcpp_hello_world.cpp')
# X contains the inputs as a matrix of real numbers
data("iris")
# X contains the input attributes (excluding the class)
X <- iris[,-5]
# y contains the response variable (named medv, a numeric value)
y <- iris[,5]
# From dataframe to matrix
X <- as.matrix(X)
# From factor to integer
y <- as.integer(y)
# This is the point we want to predict
X0 <- c(5.80, 3.00, 4.35, 1.30)
# Using my_knn and FNN:knn to predict point X0
# Using the same number of neighbors, it should be similar (k=1)
#my_knn_R(X, X0, y)
A=minmax_data_Matrix(X)
A
X
Rcpp::sourceCpp('src/rcpp_hello_world.cpp')
A=stand_data_Matrix(X)
X
A
mean(A[,2])
sd(A[,1])
A=minmax_data_Matrix(X)
mean(A[,2])
sd(A[,1])
min(A[,2])
max(A[,2])
getwd()
install.packages("/Users/ignacioalmodovarcardenas/Desktop/Advanced programming/Package_1.0.tar.gz",
repos=NULL,type = "source")
knitr::opts_chunk$set(echo = TRUE)
// [[Rcpp::export]]
library(Rcpp)
library(FNN)
sourceCpp('src/function_c.cpp.cpp')
library(Rcpp)
library(FNN)
sourceCpp('src/function_c.cpp')
data("iris")
X <- iris[,-5]
y <- iris[,5]
X <- as.matrix(X)
y <- as.integer(y)
# This is the point we want to predict
X0 <- c(5.80, 3.00, 4.35, 1.30)
my_knn_cpp(X,X0,y)
Rcpp::sourceCpp('src/rcpp_knn.cpp')
install.packages("knnhomework")
install.packages("/Users/ignacioalmodovarcardenas/Desktop/Advanced programming/KNNhomework_0.9.tar.gz",
repos=NULL,type = "source")
library(KNNhomework)
install.packages("/Users/ignacioalmodovarcardenas/Desktop/Advanced programming/KNNhomework_0.9.tar.gz",
repos=NULL,type = "source")
install.packages("/Users/ignacioalmodovarcardenas/Desktop/Advanced programming/KNNhomework_0.9.tar.gz",
repos=NULL,type = "source")
devtools::load_all(".")
install.packages("/Users/ignacioalmodovarcardenas/Desktop/Advanced programming/KNNhomework_0.9.tar.gz",
repos=NULL,type = "source")
